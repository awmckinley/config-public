#!{{ lookPath "nu" }}
#
# Initialize machine.

def success [command?: closure]: [nothing -> bool, closure -> bool] {
	let command = default $command
	do $command | complete | $in.exit_code == 0
}

def init-pdm [] {
	if (which pdm) != [] {
		pdm config venv.backend venv
	}
}

def init-tailscale [] {
	if (which tailscale) == [] {
		return
	}

	if !(success { tailscale status --peers=false }) {
		tailscale up
	}
}

def init-tldr [] {
	if (which tldr) != [] {
		tldr --update
	}
}

def init-whisper-cpp [model: string] {
	if (which whisper-cpp-download-ggml-model) == [] {
		return
	}

	let modelhome = $"($env.XDG_DATA_HOME)/whisper-cpp"
	if not ($"($modelhome)/ggml-($model).bin" | path exists) {
		whisper-cpp-download-ggml-model $model
		mkdir $modelhome
		mv $"ggml-($model).bin" $modelhome
	}
}

def init-zsh [] {
{{ if ne .chezmoi.os "windows" }}
	let zgenom = $"($env.HOME)/.zgenom"
	if not ($zgenom | path exists) {
		print "Setup zgenom"
		git clone --single-branch https://github.com/jandamm/zgenom.git --depth 1 $zgenom
		print ""
	}
{{ end }}
}

def main [] {
	init-tldr
	init-whisper-cpp "small.en"
	init-zsh
}
